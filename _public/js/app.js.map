{"version":3,"file":"_public/js/app.js","sources":["app/app.js","app/scripts/NeDBConnector.js","app/scripts/directives.js","app/scripts/filters.js","app/scripts/global/AppCtrl.js","app/scripts/global/InitializeCtrl.js","app/scripts/services.js","app/scripts/wallet/addresses/AddressesCtrl.js","app/scripts/wallet/core/Wallet.js","app/scripts/wallet/core/services/daemon/DaemonHandler.js","app/scripts/wallet/core/services/daemon/DaemonManager.js","app/scripts/wallet/dashboard/DashboardCtrl.js","app/scripts/wallet/receive/ReceiveCtrl.js","app/scripts/wallet/send/SendCtrl.js","app/scripts/wallet/transactions/TransactionsCtrl.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;CCpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;CC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;CCRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;CCRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;CCjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;CCtzdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;CCdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;CCtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["'use strict';\n\nvar App = angular.module('app', ['ngCookies', 'ngResource', 'ngRoute', 'ngAnimate', 'app.wallet', 'app.global', 'app.directives', 'app.filters', 'app.services', 'partials']);\nApp.Wallet = angular.module('app.wallet', []);\nApp.Global = angular.module('app.global', []);\n\nApp.config([\n    '$routeProvider', '$locationProvider', function ($routeProvider, $locationProvider, config) {\n        $routeProvider\n            .when('/dashboard', { controller: 'DashboardCtrl', templateUrl: '/partials/dashboard.html'})\n            .when('/send', { controller: 'SendCtrl', templateUrl: '/partials/send.html' })\n            .when('/receive', { controller: 'ReceiveCtrl', templateUrl: '/partials/receive.html' })\n            .when('/transactions', { controller: 'TransactionsCtrl', templateUrl: '/partials/transactions.html' })\n            .when('/addresses', { controller: 'AddressesCtrl', templateUrl: '/partials/addresses.html' })\n\n            .when('/initialize', { controller: 'InitializeCtrl', templateUrl: '/partials/initialize.html' })\n            .otherwise({ redirectTo: '/dashboard' });\n\n        return $locationProvider.html5Mode(false);\n    }\n]);\n\nApp.run(['$rootScope', '$route', '$location', 'daemonManager', function ($rootScope, $route, $location, daemonManager) {\n\n    var handler = daemonManager.getHandler();\n\n    $rootScope.$on(\"$routeChangeStart\", function (event, next) {\n        if (next != undefined && next.$$route != undefined) {\n\n            if (!handler.isRunning() && !handler.isInitialized()) {\n                $location.path('/initialize');\n            }\n\n        }\n    });\n\n}]);","var NeDB, createDocumentStore, createRelationalStore, createSimpleStore;\n\nNeDB = (typeof exports !== \"undefined\" && exports !== null) && exports || (this.NeDB = {});\n\nNeDB.get = function() {\n    var NeDB, datapath, e, store;\n    try {\n        NeDB = require(\"nedb\");\n        datapath = require('nw.gui').App.dataPath + \"/nedb\";\n        store = {\n            collection: function(name) {\n                return new NeDB({\n                    filename: \"app/nedb/\" + name,\n                    autoload: true\n                });\n            }\n        };\n        return store;\n    } catch (_error) {\n        e = _error;\n        if (e.code === \"MODULE_NOT_FOUND\") {\n            return console.error(\"NeDB not found. Try `npm install nedb --save` inside of `/app/assets`.\");\n        } else {\n            return console.error(e);\n        }\n    }\n};","/* Directives*/\n\nangular.module('app.directives', ['app.services']).directive('appVersion', [\n    'version', function(version) {\n        return function(scope, elm, attrs) {\n            return elm.text(version);\n        };\n    }\n]);","/* Filters*/\n\nangular.module('app.filters', []).filter('interpolate', [\n    'version', function(version) {\n        return function(text) {\n            return String(text).replace(/\\%VERSION\\%/mg, version);\n        };\n    }\n]);","App.Global.controller(\n    'AppCtrl',\n    [\n        '$scope', '$location', '$resource', '$rootScope', 'daemonManager', 'wallet',\n        function($scope, $location, $resource, $rootScope, daemonManager, wallet) {\n\n            $scope.wallet = wallet;\n\n            $scope.daemon = {\n                running: false\n            };\n\n            $scope.daemon.running = daemonManager.getHandler().isRunning();\n\n            $scope.$on('daemon.initialized', function(result) {\n                $scope.daemon.running = result;\n            });\n\n            $scope.$location = $location;\n            $scope.$watch('$location.path()', function(path) {\n                return $scope.activeNavId = path || '/';\n            });\n\n            return $scope.getClass = function(id) {\n                if ($scope.activeNavId.substring(0, id.length) === id) {\n                    return 'active';\n                } else {\n                    return '';\n                }\n            };\n\n        }\n    ]\n);","App.Global.controller(\n    'InitializeCtrl',\n    [\n        '$scope', '$location', '$resource', '$rootScope', 'daemonManager', 'wallet',\n        function($scope, $location, $resource, $rootScope, daemonManager, wallet) {\n\n            var handler = daemonManager.getHandler();\n\n            $scope.loadingStatus = 'Loading...';\n\n            $scope.displayError = function (title, message) {\n                $scope.loadingStatus = title;\n                $scope.loadingStatusError = message;\n            };\n\n            $scope.initialize = function() {\n                wallet.initialize();\n\n                var promise = handler.start();\n\n                // Already resolved?\n                if (promise === false) {\n                    $scope.displayError('Uh Oh!', handler.error);\n                } else {\n                    promise.then(function(result) {\n                        if (result) {\n                            $location.path('/dashboard');\n                        } else {\n                            $scope.displayError('Uh Oh!', handler.error);\n                        }\n                    });\n                }\n            };\n\n            $scope.initialize();\n\n        }\n    ]\n);","/* Sevices*/\n\nangular.module('app.services', []).factory('version', function() {\n    return \"0.1\";\n});","App.Wallet.controller(\n    'AddressesCtrl',\n    [\n        '$scope', function($scope) {\n            return $scope;\n        }\n    ]\n);","App.Wallet.factory('wallet',\n    [\n        '$q',\n        '$timeout',\n        '$rootScope',\n        'daemonManager',\n        function ($q, $timeout, $rootScope, daemonManager) {\n\n            var client = daemonManager.getClient();\n\n            var WalletModel = function () {\n\n                this.info = {\n                    \"version\": \"\",\n                    \"protocolversion\": \"\",\n                    \"walletversion\": \"\",\n                    \"balance\": 0,\n                    \"blocks\": 0,\n                    \"timeoffset\": 0,\n                    \"connections\": 0,\n                    \"proxy\": \"\",\n                    \"difficulty\": 0,\n                    \"testnet\": false,\n                    \"keypoololdest\": 0,\n                    \"keypoolsize\": 0,\n                    \"paytxfee\": 0,\n                    \"mininput\": 0.00,\n                    \"errors\": \"\"\n                };\n\n                this.accounts = [\n\n                ];\n\n            };\n\n            WalletModel.prototype = {\n\n                send: function(data) {\n                    var self = this;\n\n                    client.exec('settxfee', data.fee, function(err, info) {\n                        if (info || info == 'true') {\n                            client.exec('sendtoaddress', data.address, parseFloat(data.amount), data.payerComment, data.payeeComment, function(err, info) {\n                                if (err == null) {\n                                    console.log(\"Transaction Complete\");\n                                } else {\n                                    console.log(err);\n                                }\n                            });\n                        }\n                    });\n\n                },\n\n                updateInfo: function() {\n                    var self = this;\n                    client.exec('getinfo', function (err, info) {\n                        if (err == null) {\n                            self.info = info;\n                            $rootScope.$apply();\n                        }\n                    });\n                },\n\n                updateAccounts: function() {\n\n                    var async = require('async');\n                    var self = this;\n\n                    client.exec('listaccounts', function (err, accountList) {\n                        if (err == null) {\n\n                            var accounts = [];\n\n                            for (var key in accountList) {\n                                if (!accountList.hasOwnProperty(key)) continue;\n\n                                (function (key) {\n                                    async.series(\n                                        {\n                                            one: function(callback) {\n\n                                                var newAccount = {\n                                                    label: key,\n                                                    balance: accountList[key],\n                                                    address: ''\n                                                };\n\n                                                accounts.push(newAccount);\n\n                                                client.exec('getaccountaddress', newAccount.label, function(err, address) {\n                                                    if (err != null) {\n                                                        console.log(err);\n                                                        callback(false);\n                                                    } else {\n                                                        newAccount.address = address;\n                                                        callback(true);\n                                                    }\n                                                });\n\n                                            }\n                                        },\n                                        function (err, results) {\n                                            self.accounts = accounts;\n                                            $rootScope.$apply();\n                                        }\n                                    )\n                                }(key));\n                            }\n                        }\n                    });\n                },\n\n                initialize: function() {\n                    var self = this;\n\n                    $rootScope.$on('daemon.ready', function (ready) {\n                        if (ready) {\n                            self.updateInfo();\n                            self.updateAccounts();\n                        }\n                    });\n\n                    $rootScope.$on('daemon.notifications.block', function () {\n                        self.updateInfo();\n                        self.updateAccounts();\n                    });\n\n                }\n\n            };\n\n            return new WalletModel();\n        }\n\n    ]\n);","App.Wallet.DaemonHandler = (function () {\n\n    function Handler ($q, $timeout, $rootScope) {\n\n        this.$q = $q;\n        this.$timeout = $timeout;\n        this.$rootScope = $rootScope;\n\n        this.db = NeDB.get().collection('settings');\n\n        this.node = {\n            os: require('os'),\n            fs: require('fs'),\n            gui: require('nw.gui'),\n            childProcess: require('child_process')\n\n        };\n\n        this.daemonMap = {\n\n            'linux': {\n                'x32': 'daemons/reddcoind-linux32',\n                'x64': 'daemons/reddcoind-linux64',\n                'default': 'daemons/reddcoind-linux32'\n            },\n\n            'win32': {\n                'x32': 'daemons/reddcoind-win32',\n                'default': 'daemons/reddcoind-win32'\n            },\n\n            'darwin': {\n                'x32': 'daemons/reddcoind-mac32',\n                'x64': 'daemons/reddcoind-mac32',\n                'default': 'daemons/reddcoind-mac-32'\n            }\n\n        };\n\n        this.daemon = null;\n        this.daemonFilePath = null;\n        this.initialized = false;\n        this.running = false;\n        this.deferred = this.$q.defer();\n        this.error = null;\n\n    }\n\n    Handler.prototype = {\n\n        hasValidDaemon: function() {\n            var platform = this.node.os.platform();\n            return this.daemonMap[platform] !== undefined;\n        },\n\n        initializeFilePath: function() {\n            var arch = this.node.os.arch();\n            var platform = this.node.os.platform();\n\n            if (this.daemonMap[platform] !== undefined) {\n                // There is a platform, which means we can definitely run the default...\n                if (this.daemonMap[platform][arch] == undefined) {\n                    // Default architecture.. (likely will be 32bit)\n                    this.daemonFilePath = this.daemonMap[platform]['default'];\n                } else {\n                    this.daemonFilePath = this.daemonMap[platform][arch];\n                }\n            }\n        },\n\n        isWindows: function() {\n            return this.node.os.platform() === 'win32';\n        },\n\n        saveDaemonPid: function(callback) {\n            var self = this;\n            this.db.findOne({ \"type\": \"daemon\" }, function (err, doc) {\n                if (doc == null) {\n                    self.db.insert({\n                        type: 'daemon',\n                        pid: self.daemon.pid\n                    }, function() {\n                        typeof callback === 'function' && callback();\n                    });\n                } else {\n                    doc.pid = self.daemon.pid;\n                    self.db.update({_id:doc._id}, { $set: doc }, function() {\n                        typeof callback === 'function' && callback();\n                    });\n                }\n            });\n        },\n\n        killExistingPid: function(callback) {\n            var self = this;\n            this.db.findOne({ \"type\": \"daemon\" }, function (err, doc) {\n                if (doc == null) return;\n                try {\n                    process.kill(doc.pid);\n                    self.db.remove({_id:doc._id}, {});\n                    typeof callback === 'function' && callback(true);\n                } catch (error) {\n                    // Could not kill, simple..\n                    typeof callback === 'function' && callback(false);\n                }\n            });\n        },\n\n        start: function () {\n\n            var self = this;\n\n            if (this.isInitialized()) {\n                console.log(\"Cannot start the daemon handler again without resetting first.\");\n                return this.deferred;\n            } else if (!this.hasValidDaemon()) {\n                this.error = 'This operating system does not support running the Reddcoin daemon.';\n                this.deferred.reject(false);\n                this.$rootScope.$broadcast('daemon.initialized', false);\n\n                return false;\n            }\n\n            this.initializeFilePath();\n\n            if (!this.node.fs.existsSync(this.daemonFilePath)) {\n                this.error = 'Cannot find the daemon for this operating system ' +\n                             '(' + this.node.os.platform() + ' ' + this.node.os.arch() + ').';\n\n                this.deferred.reject(false);\n                this.$rootScope.$broadcast('daemon.initialized', false);\n\n                return false;\n            }\n\n            var win = this.node.gui.Window.get();\n\n            if (!this.isWindows()) {\n                this.node.childProcess.exec('chmod 777 ' + this.daemonFilePath);\n            }\n\n            // We need to kill any existing processes by the pid...\n            this.killExistingPid();\n\n            // We use a timeout to make sure the daemon is fully initialized.\n            this.$timeout(function() {\n\n                self.daemon = self.node.childProcess.spawn(self.daemonFilePath, [\n                    '-alertnotify=echo \"ALERT:%s\"',\n                    '-walletnotify=echo \"WALLET:%s\"',\n                    //'-blocknotify=echo \"BLOCK:%s\"'\n                ]);\n\n                self.saveDaemonPid();\n\n                setInterval(function() {\n                    self.$rootScope.$emit('daemon.notifications.block');\n                }, 30 * 1000);\n\n                self.daemon.stdout.on('data', function (data) {\n                    console.log(\"stdout data!\");\n                    //console.log(data);\n                    self.$rootScope.$emit('daemon.notifications.block');\n                });\n\n                self.daemon.stderr.on('error', function (data) {\n                    console.log('daemon error');\n                });\n\n                self.daemon.on('close', function (data) {\n                    console.log(\"on daemon close\");\n                    console.log(\"Daemon child process has ended...\");\n                    //win.close();\n                });\n\n                win.on('close', function() {\n                    self.daemon.kill();\n                    this.close(true);\n                });\n\n                self.$timeout(function() {\n                    self.running = true;\n                    self.initialized = true;\n                    self.deferred.resolve(true);\n                    self.$rootScope.$broadcast('daemon.initialized', true);\n                    self.$rootScope.$broadcast('daemon.ready', true);\n                    console.log(\"Daemon Ready\");\n                }, 1500);\n\n                return true;\n            }, 500); // Resolve after delay so the child process has time to start...\n\n            return this.deferred.promise;\n        },\n\n        isRunning: function() {\n            return this.running;\n        },\n\n        isInitialized: function() {\n            return this.initialized;\n        }\n\n    };\n\n    return Handler;\n\n}());","App.Wallet.factory('daemonManager',\n    [\n        '$q',\n        '$timeout',\n        '$rootScope',\n        function($q, $timeout, $rootScope) {\n\n            var handler = new App.Wallet.DaemonHandler($q, $timeout, $rootScope);\n\n            var client = require('node-reddcoin')({\n                user: 'user',\n                pass: 'password'\n            });\n\n            return {\n\n                getClient: function () {\n                    return client;\n                },\n\n                getHandler: function() {\n                    return handler;\n                }\n\n            };\n\n        }\n\n    ]\n);","App.Wallet.controller(\n    'DashboardCtrl',\n    [\n        '$scope',\n        'daemonManager',\n        'wallet',\n        function ($scope, daemon, wallet) {\n\n            $scope.wallet = wallet;\n\n\n\n        }\n    ]\n);","App.Wallet.controller(\n    'ReceiveCtrl',\n    [\n        '$scope',\n        'daemonManager',\n        'wallet',\n        function ($scope, daemon, wallet) {\n\n            $scope.wallet = wallet;\n\n\n\n        }\n    ]\n);","App.Wallet.controller(\n    'SendCtrl',\n    [\n        '$scope',\n        'daemonManager',\n        'wallet',\n        function ($scope, daemon, wallet) {\n\n            $scope.wallet = wallet;\n\n            $scope.send = {\n                amount: 1,\n                address: 'Rer7K4AwRhUYshzzPeamRkC9cV7M6BSz3P',\n                payerComment: '',\n                payeeComment: '',\n                fee: 0.001\n            };\n\n            $scope.meta = {\n                totalAmount: 0\n            };\n\n            $scope.confirmSend = function() {\n                wallet.send($scope.send);\n            };\n\n            $scope.updateMetaTotal = function() {\n                var result = parseFloat($scope.send.amount) + parseFloat($scope.send.fee);\n                if (result == null || result == undefined || isNaN(result)) {\n                    result = \"Invalid Amount\";\n                }\n                $scope.meta.totalAmount = result;\n            };\n\n            $scope.updateMetaTotal();\n\n        }\n    ]\n);","App.Wallet.controller(\n    'TransactionsCtrl',\n    [\n        '$scope', function($scope) {\n            return $scope;\n        }\n    ]\n);"]}